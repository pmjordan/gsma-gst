tosca_definitions_version: tosca_simple_yaml_1_3
description: A TOSCA template to implement the a service which includes a 5G backup to a fixed connection. The first use is a connection between an EV Charging Station and a Charging Station Management System as part of 5G Riders on the Storm 2020 Catalyst for TMForum

metadata:
  # The following fields are "normative" and expected in TOSCA 
  template_name: 5G Service Assure
  template_author: paul.m.jordan@bt.com
  template_version: '5.0'
  parse_command: puccini-tosca --quirk data_types.timestamp.permissive parse "tosca/5G Service Assure.yml" -n "tosca/5G Service Assure_inputs.yml" > out.txt
  # the quirk in the above command tells puccini to allow timestamps in yaml format as used by sid.yml

imports:
  # would normally refer to external repository but for now make it local
  - file: tosca/sid.yml
  # The content is a TOSCA encoding of selected SID information model entities as explained in IG1176 plus some small updates
    namespace_prefix: sid
  - file: tosca/5G.yml
    namespace_prefix: 5G

# This file is built on the following assumptions:
# A wireless connection is created by the 5G network in the admin down state and changed by the network to admin up when a connection request is made by a SIM. 
#     i.e. standard behavior which does not need to modelled in this TOSCA template
# The change over from fixed connection to a wireless connection is under control of the charging station.
# One slice is used for all wireless connections
# The slice will be allocated additional resources by the CSP in anticipation of a storm or other at-risk event
# The additional resources are provided only for some sub-set of the charging stations
# The sub-set of affected charging stations may change over time

# The performance monitor system is configured over TMF657

data_types:
  service_order_id_data_type:
    derived_from: integer

  service_level_objective_data_type:
    derived_from: json
    description: ServiceLevelObjective as defined by TMF657
    constraints:
      # could specify schema location as 
      # https://raw.githubusercontent.com/tmforum-apis/TMF657_ServiceQualityManagement/master/Service_Quality_Management.admin.swagger.json#/definitions/ServiceLevelObjective 
      # but blocked by my corporate firewall so use a local copy
        - schema: { "$schema": "swaggers/Service_Quality_Management.admin.swagger.json#/definitions/ServiceLevelObjective" }

  service_order_data_type:
    derived_from: json
    description: ServiceOrder as defined by TMF641
    constraints:
      - schema: { "$schema": "swaggers/TMF641-Service_Ordering-v4.0.0.swagger.json#/definitions/ServiceOrder"}

capability_types:
  monitor_performance:
    derived_from: tosca.capabilities.Node
    valid_source_types: [ performance_monitor_type ]

interface_types:
  performance_monitor_config_interface_type:
    derived_from: tosca.interfaces.Root
    operations:
      # These operations reflect the structure of TMF657
      add_threshold:
        inputs: 
          resource: 
            type: string
          verb: 
            type: string
          # We only need on instance of required_SLO but two are declared here to show alternate ways to get the value
          required_SLO_from_order: 
            type: service_level_objective_data_type
          required_SLO_from_template:
            type: service_level_objective_data_type
      add_job:
        inputs:
          resource: 
            type: string
          verb: 
            type: string
          threshold_to_apply:
            type: integer
          connection_to_monitor: 
            type: service_order_id_data_type
    # TOSCA V1.3 does not allow outputs to be defined for operations (although draft V2 does) so use notification to hold the output.
    notifications:
      add_threshold_result:
        outputs:
          threshold_id: [SELF,threshold_id]

  local_translations:
    operations:
      get_SLO_from_service_order:
        description: Parse 641 format service order to extract SLO and format it as TMF649 SLO
        inputs:
          service_order:
            type: service_order_data_type
        implementation: scripts\convert641SLO_to_649SLO.sh
    notifications:
      get_SLO_result:
        description: the output from scripts\convert641SLO_to_649SLO.sh
        outputs:
          result: [SELF, required_SLO_from_order]

# Define Node Types
node_types: 
  5G_assure_connection:
    description: assured connection using combination of fixed and wireless
    derived_from: sid:nodes.org.tmforum.models.sidmodels.ResourceDomain.ResourceABE.LogicalResourceABE.LogicalResource.ResourceFunction
    properties:
      service_order:
        type: service_order_data_type
      required_SLO_from_template:
        # This technique uses a schema taken from the TMForum API (which is itself a simplification of the SID)
        # ServiceLevelObjective is an attribute of Service and defined in TMF657 Service QualityManagement.
        # This use of API schema differs from Release 1 where SLO was defined from SID directly
        type: service_level_objective_data_type
    attributes:
      service_order_id:
        type: service_order_id_data_type
        description: An invented parameter to uniquely identify this connection
      required_SLO_from_order:
        type: service_level_objective_data_type
        description: holds the result of the operation to get SLO from service order. An alternative to the hardcoded definition in required_SLO_from_template
    interfaces:
      service_translations:
        type: local_translations
    capabilities:
      # There are always two external, user plane, interfaces
      a_end: Endpoint 
      z-end: Endpoint

  fixed_connection:
    description: connection between two endpoints over a fixed connection
    derived_from: sid:nodes.org.tmforum.models.sidmodels.ResourceDomain.ResourceABE.LogicalResourceABE.LogicalResource.ResourceFunction
    capabilities:
      # There are always user plane interfaces
      a_end: Endpoint 
      z-end: Endpoint

  wireless_connection:
    description: connection between two endpoints over a wireless connection
    derived_from: sid:nodes.org.tmforum.models.sidmodels.ResourceDomain.ResourceABE.LogicalResourceABE.LogicalResource.ResourceFunction
    attributes:
      # We need these connections to have a unique ID, assume that it is auto-generated on creation
      wireless_connection_id:
        type: integer
    requirements:
      # state the resources needed to make the connection over a slice. A slice will need to be created if it doesn't exist
      - slice:
          # we only want to specify node type but syntax demands capability as well
          capability: 5G:sliceType
          node: 5G:5G_slice
          relationship: DependsOn
    capabilities:
      # There are always two user plane interfaces
      a_end: Endpoint 
      z-end: Endpoint

  performance_monitor_type:
    derived_from: tosca.nodes.Root
    attributes:
      threshold_id:
        description: holds the result of a create threshold action performed on TMF657
        type: integer
    capabilities:
      monitor_app:
        type: monitor_performance
        occurrences: [ 0, 1 ]
    interfaces:
      performance_monitor_config:
        type: performance_monitor_config_interface_type

policy_types:
  tosca.policies.Placement.Colocate:
  # This type is used in TOSCA spec examples but not defined. Using string type is imprecise.
    derived_from: tosca.policies.Placement
    properties:
      affinity:
        type: string
    targets:
      - 5G:5G_slice



topology_template:
  node_templates:
    my_assured_connection:
      type: 5G_assure_connection
      # Every CS-CSMS connection requires an instance of a fixed connection and a wireless connection
      properties:
        service_order: { get_input: [ service_order ] }
        required_SLO_from_template:
          # This assumes that the availability target is fixed for all instances of this service and so the values are hard coded
          # An alternative possibility is that the values are provided as part of the service order - see get_SLO operation below
          '{
            "myname":
            {
             "properties": 
                {
                "conformanceComparator": "LE",
                "conformanceTarget": "0.9999",
                "name": "availability"
               }
            }
          }'
      interfaces:
        service_translations:
          operations:
            get_SLO_from_service_order:
              inputs:
                service_order: { get_property: [ SELF, service_order ] }
              # The operations and result are defined in the interface type definition
      requirements:
        - dependency: fixed_connection
          # could add additional node_filter to ensure the endpoints or other properties of the fixed connection  match those of my_CS_CSMS_connection
        - dependency: wireless_connection
          # could add additional node_filter to ensure the endpoints or other properties of the wireless connection match those of my_CS_CSMS_connection
        - dependency: performance_monitor

    my_fixed_connection:
      type: fixed_connection

    my_wireless_connection:
      type: wireless_connection
      requirements:
        - slice: slice_for_5G_assure
            # the commented out syntax is uses the target node_filter method; instead we use the abstract node template method in cs_csms_slice, either would be possible
            # node_filter:
            #   properties:
            #     sliceQoSType:
            #       - { equal: embb }

    slice_for_5G_assure:
      type: 5G:5G_embb_slice
      interfaces:
        5G_slice_management_interface:
          operations:
            change_resource_allocation:
              # It should be possible to define implementation in the interface type definition but puccini does not seem to pick it up so repeat it here
              implementation: executable_which_changes_resource.sh
              inputs: 
                affected_connections_list: { get_input: [ SELF, affected_connections_list ] }
      # this uses the abstract node template method
      # Abstract node template (placeholder) to be selected by provider
      directives: [ select ]

    performance_monitor:
      type: performance_monitor_type
      directives: [ select ]
      interfaces:
        performance_monitor_config:
          operations:
            add_threshold:
              inputs: 
                resource: threshold
                verb: post
                # We only need on instance of required_SLO but two are declared here to show alternate ways to get the value 
                # The SLO value can be hardcoded like this
                required_SLO_from_template: { get_property: [my_assured_connection,required_SLO_from_template] }
                # or the SLO value can be derived from the incoming service request like this
                required_SLO_from_order: { get_attribute: [my_assured_connection,required_SLO_from_order] }
              implementation: scripts/TMF657.sh
            add_job:
              inputs:
                resource: job
                verb: post
                connection_to_monitor: { get_attribute: [my_assured_connection,service_order_id] }
                threshold_to_apply: { get_attribute: [SELF,threshold_id] }
              implementation: scripts/TMF657.sh

  policies:
    - wireless_connection_affinity:
        type: tosca.policies.Placement.Colocate
        description: Keep all instances of my_wireless_connection on a single instance of slice_for_5G_assure
        properties:
          affinity: slice_for_5G_assure

  workflows:
    deploy:
      steps:
        extract_SLO:
          # This is only needed if the template needs to extract SLO values from within the incoming ServiceOrder
          target: my_assured_connection
          activities:
            - call_operation: service_translations.get_SLO_from_service_order
          on_success:
          - configure_performance_monitor
        configure_performance_monitor:
          target: performance_monitor
          activities:
            - call_operation: performance_monitor_config.add_threshold
            - call_operation: performance_monitor_config.add_job